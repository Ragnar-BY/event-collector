// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controllers/rest/server.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	domain "github.com/Ragnar-BY/event-collector/internal/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEventUsecase is a mock of EventUsecase interface.
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase.
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance.
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockEventUsecase) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockEventUsecaseMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEventUsecase)(nil).Ping), ctx)
}

// SaveEvents mocks base method.
func (m *MockEventUsecase) SaveEvents(ctx context.Context, events []domain.Event, clientIP string, serverTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvents", ctx, events, clientIP, serverTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockEventUsecaseMockRecorder) SaveEvents(ctx, events, clientIP, serverTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockEventUsecase)(nil).SaveEvents), ctx, events, clientIP, serverTime)
}
