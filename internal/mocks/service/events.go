// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/events.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	domain "github.com/Ragnar-BY/event-collector/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CloseDB mocks base method.
func (m *MockEventService) CloseDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockEventServiceMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockEventService)(nil).CloseDB))
}

// PingDB mocks base method.
func (m *MockEventService) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockEventServiceMockRecorder) PingDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockEventService)(nil).PingDB), ctx)
}

// SaveEvents mocks base method.
func (m *MockEventService) SaveEvents(ctx context.Context, events []domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockEventServiceMockRecorder) SaveEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockEventService)(nil).SaveEvents), ctx, events)
}
